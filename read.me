Commands executed to generate this project
> npm install -g @angular/cli
> ng new [NAME OF YOUR PROJECT]
 - "No" to Add Angular routing
 - "SCSS" to Stylesheet format
> ng serve

Steps to implement a New Component
 - Create a new folder
  -=- Create a .TS File (nova-transferencia.component.ts) with class
  -=- Create a HTML (nova-transferencia.component.html) File
  -=- Create a SCSS (nova-transferencia.component.scss) File
  -=- Add the Class created at .TS file into the "app.module.ts", specifically into "declarations" array

Steps to use the new Component
 - Add the new <TAG> created, as especified in "selector" at .TS file, in the "app.component.html" file
 - To verify its funcionality, access the "http://localhost:4200" URL and inspect the page content.
  -=- Inside the <app-root> tag, it should appear the new tag created.

How ro override the Submit event in the forma
 - In the "app.module.ts", import the FormsModule (@angular/forms) at "imports".
 - In .TS File, add a new Method (transferir()) that will be invoked at Submit Event from Form
 - At <form> tag, add the "(ngSubmit)=" Attribute/"Event Binding" invoking the Method created before

Types of Binding
 ([ngModel])  = Two Way Data Binding - Data is transfered from Template to Component and vice versa
  - https://angular.io/guide/property-binding

 [ngModel]    = Property Binding - Data is transfered from Component to Template only,
  - https://angular.io/guide/property-binding

 (ngModel)    = Event Binding - Binds and Event from DOM/Template to a Method at a Angular/TypeScript Component
  - https://angular.io/guide/event-binding

How to Output data from Component to Template
 - In .TS class, add a new Attribute annotated with @Output and receiving a new Object of EventEmitter (typed with "any" for now)
 - Invoke the new Attribute with .emit receiving as parameter the Object(s) that we want to export as an Output
 - In the Class AppComponent in "app.component.ts" add a Method that is going to receive the Output Data
 - In the "app.component.html" add an Event Binding with the @Output attribute created in .TS class, receiving in an attribuition the Method created in AppComponent

Creating a new Component automatically
 - With the following command, the Angular will create a new Folder with 4 files (.TS, .HTML, .SCSS and a .SPEC.TS for Testing):
 > ng generate component <NAME OF THE NEW COMPONENT>

 Connecting the new Extrato component with App component
  - App Component has the TransferenciaAppComponent object
  - App Template has on it both an Object (Transferencia's Array) and the Extrato Template.
   -=- it allows a binding, where the Extrato Component can have access to this Transferencia's Array
  - Extrato Component has to have an @Input() transferenciasExtrato Array attribute to receive the previous object.
  - Extrato Template gets the transferenciaExtrato object to get it's attributes
  - App Template receives the <app-extrato> tag, and we put a Property Binding to transferenciaAppComponent on it

How to store at Component's and show a list of objects on the Template:
 - On App Component, change the TransferenciaAppComponent to an Array and initialize it empty
 - On Extrato Component, also change the TransferenciaExtrato to an empty Array
 - If any of previous arrays have any renaming, do the same at App Template
 - On Extrato Template, add a <div> with the *ngFor directive and do a "let item of collection" command on it to iterate, using the item in the <p> as content

Formating Date and Currency do Locale
 - in App Module, at @NgModule has the array field "providers". We should add 2 object in it, to Locale and Currency
  -=- For Locale, we need to add "{provide: LOCALE_ID, userValue: 'pt'}
  -=- For Currency, we need to add "provide: DEFAULT_CURRENCY_CODE, userValue: 'BRL'"
  -=- both provide's above are imported from '@angular/core'
  -=- The "localePt"  has to be imported from '@angular/common/locales/pt'
  -=- The "localePt" and 'pt' have to be passed as parameters to 'registerLocaleData()', a function imported from '@angular/common'

Replacing the content of a <TBody> with a conditional If
 - using the *ngIf directive, we can use a conditional clause on it, to show it's original content, or replace it by something else
 - the <ng-Template> should be named with "#", and have a content that will be placed as <TBody> content if Else clause would be satisfied

Refactoring with Service
 - App Component does not need any more to have the Transferencia's Array and the logic of Adding new Elements to it.
 - App Template does not need any more to have a reference to Transferencia's Array
 - Extrato Component does not need any more to use the @Input(), but we need to inject a private attribute to Service in Constructor and invoke the Service method in ngOnInit() method and store its result in a own array attribute

Creating a Mock Rest API with some Data to Tests
 - Access the Json-Server on GitHub (https://github.com/typicode/json-server) to see if commands below are still updated
 >npm install -g json-server
 - Create a db.json with a collection of Json objects, in a Folder like Data shown below and execute this command:
 >npm install -g json-server
 - Access the URL below
 = http://localhost:3000/

Converting a Json Object into a TypeScript Model Class
 - Access the Json to/2 TS site (http://json2ts.com/)



References:
 - https://github.com/alura-cursos/1952-angular/tree/aula-1
 - https://github.com/alura-cursos/1952-angular/tree/aula-2
 - https://github.com/alura-cursos/1952-angular/tree/aula-3
 - https://github.com/alura-cursos/1952-angular/tree/aula-4
 - https://github.com/alura-cursos/1952-angular/tree/aula-5



